.data

nl: 	.asciz "\n"
invalid_entry: 	.asciz "Entrada invalida."
sim: 	.asciz "sim"
nao: 	.asciz 	"nao"

.text
main:
	#read int
	li a7, 5
	ecall
	
	mv t1, a0 #t1 = numero a se verificar
	
	li t2, 1 #t2 = 1
	li t3, 2 #t3 = 2
	blez t1, invalid #se t1 <= t2
	
	fcvt.s.w f3, t1 #converte t1 para float
	
	fsqrt.s f4, f3, - #raiz quadrada de t1 
	fcvt.w.s t4, f4 #converte a raiz para inteiro 
	
	li t0, 2 #t0 = 2 t0 sera o i do for 
	beq t1, t2, notprime
	beq t1, t3, prime #se for 2 é primo
for:	
#for (int i = 2; i <= num / 2; i++)
	rem t5, t1, t0 # modulo entre numero e i 
#if (num % i == 0) nao é primo
	beqz t5, notprime #if t5 = 0 nao é primo
	beq t4, t5, prime #se t0 = t4 goto endprog
	addi t0, t0, 1 #i++
	j for 
prime:
	#printa sim
	la a0, sim
	li a7, 4
	ecall
	
	j endprog

notprime:
	#printa nao
	la a0, nao
	li a7, 4
	ecall
	
	j endprog

invalid:
	#entrada invalida
	la a0, invalid_entry
	li a7, 4
	ecall

endprog:
	la a0, nl
	li a7, 4
	ecall
	
	#encerra o programa
	li a7, 10
	ecall
