.data
nl: 	.asciz 	       "\n"
invalid_entry: 	.asciz "Entradas invalidas."
exp: 	.asciz 	       "A exponencial modular "
pow: 	.asciz         " elevado a "
mod: 	.asciz         " (mod "
eh: 	.asciz         ") eh "
nao: 	.asciz 	       "O modulo nao eh primo."
dot: 	.asciz         "."

.text
main:
	#primeiro numero
	li a7, 5
	ecall
	mv a1, a0       #a1 primeiro num
	addi a5, a1, 0  #a5 = a1
	
	#segundo numero
	li a7, 5
	ecall
	mv a2, a0      #a2 segundo num
	addi t6, a2, 0 #t6 = a2
	
	#terceiro numero (primo)
	li a7, 5
	ecall
	
	mv t1, a0#t1 = numero a se verificar
	
	li t2, 1 #t2 = 1
	li t3, 2 #t3 = 2
	li a6, 3 #a6 = 3
	
	blez t1, invalid #se t1 <= 0
	blez a1, invalid #se a1 <= 0 
	blez a2, invalid #se a2 <= 0 
	
	beq t1, t2, notprime #se for 1
	beq t1, t3, setA6    #se for 2 é primo
	beq t1, a6, setA6    #se for 3 é primo kkk
	
	fcvt.s.w f3, t1 #converte t1 para float
	fsqrt.s f4, f3  #raiz quadrada de t1  
	
	li t0, 2 	#t0 = 2 t0 sera o i do for 
	
	fcvt.w.s t4, f4 #converte a raiz para inteiro
#for:	
	#for (int i = 2; i <= num / 2; i++)
	#remu t5, t1, t0 # modulo entre numero e i 
	
	#if (num % i == 0) nao é primo
	#beqz t5, notprime #if t5 = 0 nao é primo
	#bge t0, t4, setA6 #se for primo
	#addi t0, t0, 1    #i++
	
#for1: 
	#remu a3, t0, t3   # se o modulo entre i e 2 = 0
	#beqz a3, it 
	
	#j for 
#it: 	
	#addi t0, t0, 1 	  #i++
	#j for
setA6:
	li a6, 1
while:
	beqz a2, result      # se expoente for <= 0
square:	
	remu a4, a2, t3      # modulo expoente e 2
	beq a4, a6, multiply # se o modulo for = 1
	
	continue:
	mul a1, a1, a1	     # base = base * base
	remu a1, a1 t1       # base = (base * base) % modulo 
	div a2, a2, t3       #expoente = expoente / 2
	
	j while
	
multiply:
	mul t2, t2, a1      # result * base
	remu t2, t2, t1     # result = (result * base) % modulo
	
	j continue
	
result:
	la a0, exp #A exponencial modular 
	li a7, 4
	ecall
	
	mv a0, a5 #num1
	li a7, 1
	ecall
	
	la a0, pow #elevado a 
	li a7, 4
	ecall
	
	mv a0, t6 #num2
	li a7, 1
	ecall
	
	la a0, mod #(mod 
	li a7, 4
	ecall
	
	mv a0, t1 #num3 (primo)
	li a7, 1
	ecall
	
	la a0, eh #) eh
	li a7, 4
	ecall
	
	mv a0, t2 # resultado modulo
	li a7, 1
	ecall
	
	la a0, dot
	li a7, 4
	ecall
	
	j endprog
	
notprime:
	#printa nao
	la a0, nao
	li a7, 4
	ecall
	
	j endprog

invalid:
	#entrada invalida
	la a0, invalid_entry
	li a7, 4
	ecall

endprog:
	la a0, nl
	li a7, 4
	ecall
	
	#encerra o programa
	li a7, 10
	ecall
