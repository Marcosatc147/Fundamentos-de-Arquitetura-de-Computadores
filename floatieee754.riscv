.data
sin_p: 	.asciz "+"
sin_n: 	.asciz "-"
infin: 	.asciz "Infinity"
endl:	.asciz "\n"

.text 
.globl main
main: 
 	#Entrada em float
 	li a7, 6 #6 syscall readfloat
 	ecall
 	
 	#salva o float no registrador f0
 	fmv.s f0, fa0
 	
 	#imprimir o número float
 	li a7, 2
 	ecall
 	
 	#endline
 	la a0, endl
 	li a7, 4
 	ecall
 	
 	#extrair o sinal
 	fmv.x.w t0, f0 #copia o valor do sinal para t0
 	srli t0, t0, 31 #shifta, remove os bits de sinal e mantissa
 	beqz t0, positivo #if t0 = 0 branch +
 	la a0, sin_n #load address sinal negativo
 	li a7, 4 #printString
 	ecall
 	j call_main1
 	
 positivo:
 	la a0, sin_p #load address label sinal positivo
 	li a7, 4
 	ecall
call_main1:
 	la a0, endl
 	li a7, 4
 	ecall
 	
 	#Extrair expoente
 	fmv.x.w t0, f0 #copia o valor do expoente para t0
 	srli t0, t0, 23 #remove os bits de sinal e mantissa 
 	li t1, 127
 	
 	#Verifique se é Infinity (expoente 255) e ajuste para 128
 	li t2, 255
 	beq t0, t2, prnt_inf # if t2 = t0 branch print infinity
 	
 	sub t0, t0, t1 # t0 = t0 - t1
 	bgt t0, t1, sub_excesso #if t0>t1 branch sub_excesso / comparar com 127 (valor max permitido)
 	j call_main2
 	
 prnt_inf:
 	li t0, 128
 	j call_main2
 	
 sub_excesso:
 	li t2, 128
 	sub t0, t0, t2 # t0 = t0 -t2 -> subtrai 128 para ajustar o expoente
 	bgt t0, t1, sub_excesso #if t0>t1 -> goto branch sub_excesso
 	
 call_main2:
 	#imprimir o expoente
 	mv a0, t0
 	
 	li a7, 1
 	ecall
 	
 	la a0, endl
 	li a7, 4
 	ecall
 	
 	#extrair mantissa
 	li t1, 0x7FFFFF #mascara para a mantissa (23 bits)
 	fmv.x.w t2, f0 #copia o valor da mantissa para t2
 	and t2, t2, t1 #aplica a mascara para obter a mantissa
 	
 	#converter a mantissa para hexadecimal
 	li a7, 34 #syscall write_hex
 	mv a0, t2 #valor da mantissa em a0
 	mv a1, a0 #numero de digitos  (usar o mesmo valor de a0)
 	ecall
 	
 	la a0, endl
 	li a7, 4
 	ecall 
 	
 	#encerra o programa
 	li a7, 10
 	ecall
